name: upload

on:
  release:
    types: [created]

jobs:
  build-release:
    name: build-release
    needs: ['create-release']
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Build release binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Build archive
        shell: bash
        run: |
          staging="test-action-${{ matrix.platform }}-${{ github.event.release.tag_name }}"
          mkdir -p "$staging"
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            cp "target/release/test-action.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "::set-env name=ASSET::$staging.zip"
          else
            cp "target/release/test-action" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "::set-env name=ASSET::$staging.tar.gz"
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
