name: release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Print github.ref
        run: echo ${{ github.ref }}

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      - name: Set release upload URL
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
          echo "release upload url: $RELEASE_UPLOAD_URL"

      - name: Build release binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Build archive
        shell: bash
        run: |
          staging="test-action-${{ matrix.platform }}-${{ github.event.release.tag_name }}"
          mkdir -p "$staging"
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            cp "target/release/test-action.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "::set-env name=ASSET::$staging.zip"
          else
            cp "target/release/test-action" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "::set-env name=ASSET::$staging.tar.gz"
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
